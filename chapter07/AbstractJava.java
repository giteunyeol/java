package chapter07;


public abstract class AbstractJava {
	// 사전적의미의 추상
	//  - "실체 간에 공통되는 특성을 추철한 것:
	//  - ex) 강아지, 고양이, 사자 등의 공통 특성을 추출 -> 동물
	//  - 동물, 회사와 같이 구체적인 실체라기보다는
	//    실체들의 공통되는 특성을 가지고 있는 추상적인 것.
	//  * 추상 클래스는 실체 클래스가 공통적으로 가져야 할 필드와
	//    매서드들을 정의해 놓은 것
	//  -> 공통적으로 가져야 할 필드와 메서드들을 정의해 놓은 
	//     추상적인 클래스이므로 실체 클래스의 필드와 메서드를
	//     통일하는데 목적(강제성)
	//  -  추상클래스는 객체 생성 불가!
	//  -> 일반클래스가 추상클래스를 상속받아서 사용!
	//  -> 추상클래스를 상속 받은 일반클래스는 추상 클래스의 
	//     필드와 메서드를 사용할 수 있고, 자기 클래스 내에
	//     선언 된 필드와 메서드도 사용 가능
	//  -> 자식클래스들에게 강제로 무엇인가 꼭 재정의 해야할 때
	//     추상을 사용함. 
	
    //  ex) 김밥천국 브랜드 대표
	//      추상클래스(메뉴) -> 추상메서드(김밥)
	//        추상클래스(메뉴) -> 상속 -> 일반 클래스(메뉴) -> 강제로 김밥을 오버라이딩 
	//      * 메뉴판
	//      - 광주지점: 김밥, 떡볶이
	//      - 서울지점: 돈까스, 덮밥
	//      - 대전지점: 김밥, 덮밥
	//      - 부산지점: 어묵, 덮밥
	//      - 제주지점: 김밥, 어묵
	
	// * 객체 생성
	//    구조: 부모(2발자전거) - 자식(4발 자전거)
	//    1. new 를 통해서 객체 생성(인스턴스) -> 사용
	//       - 부모 2발 자전거 -> 인스턴스
	//       - 추상 클래스 -> 불가능
	//    2. 부모의 역할로서 생성자를 통해서 생성(인스턴스) -> 자식이 가져다 사용 
	//       - 부모(2발 자전거) -> 상속 -> 자식(오버라이딩)
	//       - 추상부모(2발 자전거) -> 상속 -> 자식(오버라이딩)
	//         ㄴ super(): 부모 생성자 호출 -> 부모 인스턴스 생성 
	
	//  추상 클래스(미완성 클래스)
	//   - 추상 메서드 하나 이상 포함하면 추상 클래스가 됨 (개발자끼리의 규칙) 
	//   - 추상 클래스에 추상 메서드가 하나도 없어도 문제는 없음
	//     ㄴ 일반클래스처럼 사용하면 됨(의미가 없음)
	//   - 추상클래스는 새로운 실체 클래스를 만들기 위한 부모로만 사용
	//   - 추상 클래스는 new 연산자를 통한 객체 생성 불가, 사용하기 위해서는 반드시
	//     상속 받은 자식 클래스를 통해서만 가능
	//   - 객체를 생성하지 못하는 것을 제외하면 일반 클래스와 동일
	//   - 필드, 생성자, 메서드, + 추상 메서드로 구현(일반 클래스 + 추상 기능)
	//   - new 연산자로 객체생성은 불가하지만, 자식 객체 생성시
	//     super()를 호출해서 사용하기 때문에 생성자 반드시 필요
	
	//   추상 메서드(실행부가 없는 메서드)
	//   - 매서드 내용부(실행문)가 정의되지 않은 메서드
	//   -> 상속 받은 메서드를 오버라이딩 해서 사용
	//   -> 일반 메서드는 오버라이딩 안해도 문제 없음
	//   -> 추상 메서드는 반드시 오버라이딩 해야함(강제성, 안하면 error)
	//   -> return 타입, 메서드 이름, 매개변수만 기술되기 때문에
	//      {} 없음
	//   -> 추상메서드는 지정어로 abstract 를 사용하지만, 인터페이스에서는
	//      생략할 수 있음
	//   -> 접근제한자는 private 외에 모두 사용 가능
}
