package chapter08;

public class InterfaceJava {
	// 추상 클래스의 목적
	//  - 통일성(강제성)
	//  문제점 1-> 추상 클래스기 때문에 다중상속 불가
	//  문제점 2-> 추상 클래스는 일반클래스 + 추상 기능이기 때문에
	//     선언되는 내용들이 혼선!
	//  * 문제를 해결하기 위해서 추상기능만 추출해서 새로만든
	//    인터페이스 사용!
	
	// 추상클래스와 인터페이스 비교
	//  1. 공통점
	//    - 추상 메서드 사용(하위 클래스에서 오버라이딩)
	//    - 객체 타입을 정의하는 것이 목적(new 객체 생성 x)
	//    - 다형성 사용 가능
	
	//  2. 차이점 
	//    - 추상클래스(상속:extends), 인터페이스(구현:implements)
	//    - 추상클래스(필드, 생성자, 메서드, 추상메서드)
	//    - 인터페이스(상수, 추상메서드)
	
	// * 클래스 - 클래스(상속)
	// * 인터페이스 - 클래스(구현)
	// * 인터페이스 - 인터페이스(상속)
	// * 일반클래스 - 상속과 구현을 같이 할 수 있을까? YES
	// * 다형성 -> 인터페이스로 많이 활용!
	
	
	// 인터페이스(not class)
	//  - 객체의 사용방법을 정의한 타입, 연결점, 접점, 매개체
	//  - 기존에는 인터페이스 내에 상수와 추상메서드만 올 수 있음
	//     ㄴ 자바8버전 이후로 디폴트메서드와 정적메서드도 추가 가능
	//      (인터페이스 확장성)
	//  - 상수(public static final) 생략 가능
	//  - 추상메서드(public abstract) 생략 가능
	//  - 인터페이스는 모두 public 만 사용 가능
	//  - 인터페이스 - 구현 - 일반 클래스 -> 추상메서드(오버라이딩) public 만 사용가능
	//  - 인터페이스는 다중구현이 가능
	//  - 인터페이스들끼리는 다중상속이 가능
	//  - 인터페이스는 객체(X), 객체타입(그릇)으로만 사용
	//  - 네이밍룰: 클래스와 동일한데 맨 앞에 대문자 I 추가
	//    ㄴ IFunction
	//  - 인터페이스를 구현받은 일반클래스에는 impl을 붙여서
	//    이름을 지음 
}
